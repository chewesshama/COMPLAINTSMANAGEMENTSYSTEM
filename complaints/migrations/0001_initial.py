# Generated by Django 4.2.5 on 2023-10-02 05:58

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, default='default_pic.jpg', null=True, upload_to='profile_pictures/')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('district', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('Opened', 'Opened'), ('Forwarded', 'Forwarded'), ('Closed', 'Closed')], default='Opened', max_length=20)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='ComplaintAttachments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='complaint_pictures')),
                ('video', models.FileField(blank=True, null=True, upload_to='complaint_videos')),
                ('voice', models.FileField(blank=True, null=True, upload_to='complaint_voices')),
                ('file', models.FileField(blank=True, null=True, upload_to='complaint_files')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Remark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('status', models.CharField(choices=[('Opened', 'Opened'), ('Forwarded', 'Forwarded'), ('Closed', 'Closed')], default='Opened', max_length=20)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('attachments', models.ManyToManyField(to='complaints.complaintattachments')),
                ('complaint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='remarks', to='complaints.complaint')),
                ('remark_targeted_department', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='complaints.department')),
                ('remark_targeted_personnel', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='remark_target', to=settings.AUTH_USER_MODEL)),
                ('respondent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DepartmentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Opened', 'Opened'), ('Forwarded', 'Forwarded'), ('Closed', 'Closed')], default='Opened', max_length=20)),
                ('complaint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='complaints.complaint')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='complaints.department')),
            ],
        ),
        migrations.AddField(
            model_name='complaint',
            name='attachments',
            field=models.ManyToManyField(to='complaints.complaintattachments'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='complainant',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complaint',
            name='department_history',
            field=models.ManyToManyField(blank=True, related_name='history', through='complaints.DepartmentHistory', to='complaints.department'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='targeted_department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaint_department', to='complaints.department'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='targeted_personnel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints_targeted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='departments',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_department', to='complaints.department'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
